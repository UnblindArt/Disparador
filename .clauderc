# Claude AI - Instru√ß√µes para o Projeto WhatsApp Dispatcher

## üéØ REGRA PRINCIPAL

**SEMPRE consulte `/opt/whatsapp-dispatcher-client/DOCUMENTATION.md` ANTES de fazer qualquer altera√ß√£o no c√≥digo!**

Esta documenta√ß√£o cont√©m:
- Arquitetura do sistema
- Padr√µes de c√≥digo estabelecidos
- Estrutura de dados da Evolution API v2
- Solu√ß√µes para problemas conhecidos
- Guia de desenvolvimento

## üì¶ POL√çTICA DE VERSIONAMENTO

**TODOS os projetos devem seguir versionamento sem√¢ntico:**

### Est√°gio Atual: V0 (Vers√£o Inicial)

### Regras de Versionamento:

1. **Desenvolvimento Incremental**
   - Cada solicita√ß√£o de altera√ß√£o/ajuste cria uma nova vers√£o
   - Vers√µes seguem formato: V0, V1, V2, V3...
   - Branches de desenvolvimento: `feature/v1`, `feature/v2`, etc.

2. **Branches e Ambientes**
   - `main` ‚Üí Produ√ß√£o (vers√£o aprovada atual)
   - `develop` ‚Üí Desenvolvimento ativo
   - `feature/vX` ‚Üí Desenvolvimento da vers√£o X espec√≠fica

3. **Processo de Aprova√ß√£o**
   - ‚ö†Ô∏è **NUNCA atualize a URL de produ√ß√£o sem aprova√ß√£o expl√≠cita**
   - Ap√≥s implementar mudan√ßas, deploy em ambiente de staging
   - URL staging: `https://dev-disparador.unblind.cloud`
   - URL produ√ß√£o: `https://disparador.unblind.cloud` (apenas ap√≥s aprova√ß√£o)
   - Aguarde aprova√ß√£o do usu√°rio antes de promover vers√£o

4. **Workflow de Deploy**
   ```
   Implementa√ß√£o ‚Üí Deploy Staging ‚Üí Testes ‚Üí Aprova√ß√£o ‚úì ‚Üí Deploy Produ√ß√£o
   ```

5. **Documenta√ß√£o de Vers√µes**
   - Mantenha CHANGELOG.md atualizado
   - Documente breaking changes
   - Liste novas features por vers√£o
   - Inclua data de release

6. **Rollback**
   - Sempre mantenha vers√£o anterior dispon√≠vel
   - Tag git para cada vers√£o: `v0`, `v1`, `v2`...
   - Possibilidade de rollback r√°pido se necess√°rio

### Exemplo de Ciclo:

```bash
# V0 ‚Üí V1 (nova feature de campanhas)
git checkout -b feature/v1
# ... implementa√ß√µes ...
git tag v1
git push origin feature/v1 --tags

# Deploy staging para testes
docker stack deploy -c staging.yaml

# Ap√≥s aprova√ß√£o
git checkout main
git merge feature/v1
# Deploy produ√ß√£o
```

## üìã Checklist Antes de Modificar C√≥digo

1. ‚úÖ Ler a se√ß√£o relevante da DOCUMENTATION.md
2. ‚úÖ Verificar padr√µes de c√≥digo existentes
3. ‚úÖ Entender fluxo de dados completo
4. ‚úÖ Seguir conven√ß√µes estabelecidas
5. ‚úÖ Atualizar documenta√ß√£o se necess√°rio

## üîí Regras Espec√≠ficas

### Evolution API v2

**NUNCA use GET para endpoints de chat - sempre POST!**

```javascript
// ‚ùå ERRADO
await axios.get('/chat/findChats/instance')

// ‚úÖ CORRETO
await axios.post('/chat/findChats/instance', { where: {} })
```

**SEMPRE use evolutionService.js - nunca chame API diretamente!**

**SEMPRE normalize dados com `normalizeContactName()`**

**SEMPRE remova duplicatas usando Map**

### Backend

- Use `asyncHandler` em todos os controllers
- Retorne objetos estruturados: `{ success, data, error }`
- Log com `logger.info()` / `logger.error()`
- Valide entrada do usu√°rio
- Trate erros adequadamente

### Frontend

- Use React Query para todas as chamadas API
- TypeScript sempre (sem `any`)
- Componentes funcionais com hooks
- TailwindCSS para estilos
- Invalidate queries ap√≥s mutations

### Database

- Use Supabase client via `supabaseAdmin`
- Sempre filtre por `user_id` para isolamento
- Soft delete com `deleted_at`
- Use JSONB para campos flex√≠veis (`metadata`, `custom_fields`)

## üêõ Problemas Conhecidos (RESOLVIDOS)

### ‚úÖ Nomes t√©cnicos nas conversas
**Solu√ß√£o**: `normalizeContactName()` em evolutionService.js

### ‚úÖ Conversas duplicadas
**Solu√ß√£o**: Map com remoteJid como chave √∫nica

### ‚úÖ lastMessage n√£o aparece
**Solu√ß√£o**: Parseia tanto formato objeto quanto flattened

### ‚úÖ Chats desordenados
**Solu√ß√£o**: Ordena por conversationTimestamp

## üìù Fluxo ao Adicionar Features

1. **Planejamento**
   - Ler documenta√ß√£o relevante
   - Identificar arquivos afetados
   - Planejar estrutura de dados

2. **Backend**
   - Service layer (l√≥gica de neg√≥cio)
   - Controller (valida√ß√£o + resposta)
   - Route (definir endpoint)
   - Testar com curl/Postman

3. **Frontend**
   - Atualizar tipos TypeScript
   - Criar/atualizar API client
   - Implementar UI com React Query
   - Testar fluxo completo

4. **Documenta√ß√£o**
   - Atualizar DOCUMENTATION.md
   - Adicionar exemplos
   - Documentar novos endpoints

5. **Deploy**
   - `pm2 restart whatsapp-dispatcher-api --update-env`
   - Verificar logs
   - Testar em produ√ß√£o

## üéì Recursos

- Documenta√ß√£o principal: `/opt/whatsapp-dispatcher-client/DOCUMENTATION.md`
- Contexto do VPS: `/root/.claude-context.md`
- Evolution API v2: https://doc.evolution-api.com/v2

## ‚ö†Ô∏è IMPORTANTE

Se voc√™ identificar inconsist√™ncias entre o c√≥digo e a documenta√ß√£o:
1. Analise qual est√° correto
2. Corrija o que estiver errado
3. Atualize ambos para ficarem sincronizados

A documenta√ß√£o deve sempre refletir o estado atual do c√≥digo!
